// Class serialization/deserialization using supplied functions
import crack.ascii hex;
import crack.cont.array Array;
import crack.io Formatter, Writer, cout, FDReader, FDWriter, FStr;
import crack.lang InvalidArgumentError, Buffer;
import whip.serializer Materializer, Serializer, Serializable, cmp;
import whip.xdr_serializer XDRBufferSerializer, XDRBufferMaterializer;


// This is what we will autogenerate
class testSerialize_Base {

    int int1 = -1;
    uint uint2 = 1;
    int32 int3 = 2;
    uint32 uint4 = 3;
    String S = "Hello";
    Array[int] A = [10];

    void serialize(Serializer sr, Buffer name) {
        if (sr.hasPrefix) sr.prefix(name);
        sr.format(int1, "int1");
        sr.write(sr.itemSep);
        sr.format(uint2, "uint2");
        sr.write(sr.itemSep);
        sr.format(int3, "int3");
        sr.write(sr.itemSep);
        sr.format(uint4, "uint4");
        sr.write(sr.itemSep);
        sr.format(S, "S");
        sr.write(sr.itemSep);
        sr.format(A, "A");
        if (sr.hasPostfix) sr.postfix(name);
    }

    void materialize(Materializer m, Buffer name) {
        int1 = m.format(int1, "int1");
        uint2 = m.format(uint2, "uint2");
        int3 = m.format(int3, "int3");
        uint4 = m.format(uint4, "uint4");
        S = m.format(S, "S");
        A = m.format(A, "A");
    }

    uint sizeNeeded(){
        uint cnt;
        cnt+=8; //int1
        cnt+=8; //uint2
        cnt+=4; //int3
        cnt+=4; //uint4
        cnt+=S.size; // S
        cnt+=4+A.count()*4; //A
        return cnt;
    }

    int cmp(Object obj){
      if (!obj.isa(testSerialize_Base))
        throw InvalidArgumentError("Comparing testSerialize to different object");
      other := testSerialize_Base.cast(obj);
      int result = 0;

      result = cmp(int1, other.int1);
      if (result) return result;

      result = cmp(uint2, other.uint2);
      if (result) return result;

      result = cmp(int3, other.int3);
      if (result) return result;

      result = cmp(uint4, other.uint4);
      if (result) return result;

      result = cmp(S, other.S);
      if (result) return result;

      result = cmp(A, other.A);
      return result;
    }

}

class testSerialize : testSerialize_Base {

    void formatTo(Formatter fmt) {
        fmt.write("testSerialize {\n");
        fmt `   int int1 = $int1\n`;
        fmt `   uint2 = $uint2\n`;
        fmt `   int3 = $int3\n`;
        fmt `   uint32 uint4 = $uint4\n`;
        fmt `   String S = $S\n`;
        fmt `   Array[int] A = $A\n`;
        fmt.write("}");
    }

}

testSerialize test, test2;

for (uint i=0; i<1; i++){

  test = testSerialize();
  cout `$test\n`;
  sXDR := XDRBufferSerializer(test.sizeNeeded());
  test.serialize(sXDR, null);


  mXDR := XDRBufferMaterializer(sXDR.getBuffer());
  test2 = testSerialize();
  test2.int1 = 999;
  test2.uint2 = 999;
  test2.int3 = 999;
  test2.uint4 = 999;
  test2.S = "Random string";
  test2.A = Array[int]![1,2,3,4];

  test2.materialize(mXDR, null);
}

if (test == test2) cout `ok\n`;


