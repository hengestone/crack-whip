// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2012-6-17 14:51:4 DST

import crack.cont.array Array;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer;

//------------------------------------------------------------------------------
class testSerialize_Base {
  int int1 = -1;
  uint uint2 = 1;
  int32 int3 = 2;
  uint32 uint4 = 3;
  String S = "Hello";
  Array[int] A = [10];

  void serialize(Serializer sr) {
    sr.format(int1);
    sr.format(uint2);
    sr.format(int3);
    sr.format(uint4);
    sr.format(S);
    sr.format(A);
  }

  uint sizeNeeded() {
    uint cnt = 0;
    cnt += INT_SIZE; // int1
    cnt += INT_SIZE; // uint2
    cnt += 4; // int3
    cnt += 4; // uint4
    cnt += S.size + (4 - (S.size)%4); // S
    cnt += A.count() + (4 - (A.count())%4); // A
    return cnt;
  }

  void materialize(Materializer m) {
    int1 = m.format(int1);
    uint2 = m.format(uint2);
    int3 = m.format(int3);
    uint4 = m.format(uint4);
    S = m.format(S);
    A = m.format(A);
  }
}

//------------------------------------------------------------------------------
class testSerializeContainer_Base {
  testSerialize T;

  void serialize(Serializer sr) {
    T.serialize(sr);
  }

  uint sizeNeeded() {
    uint cnt = 0;
    sn := T.sizeNeeded();
    cnt += sn + (4 - sn % 4); // T
    return cnt;
  }

  void materialize(Materializer m) {
    T.materialize(m);
  }
}

