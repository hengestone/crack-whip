// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-0-2 22:0:59

import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.lang InvalidArgumentError;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer;

FStr sfmt = {};

//------------------------------------------------------------------------------
class testSerialize_Base {
  uint32 __id = 0x33a98818;
  uint32 getId() { return __id; }
  int int1 = -1;
  uint uint2 = 1;
  int32 int3 = 2;
  uint32 uint4 = 3;
  String S = "Hello";
  Array[int] A = [10];

  void serialize(Serializer sr, Buffer name) {
    sr.format(__id, "__whipMessageId");    sr.format(int1, "int1");
    sr.format(uint2, "uint2");
    sr.format(int3, "int3");
    sr.format(uint4, "uint4");
    sr.format(S, "S");
    sr.format(A, "A");
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += INT_SIZE; // int1
    cnt += INT_SIZE; // uint2
    cnt += 4; // int3
    cnt += 4; // uint4
    cnt += S.size + (4 - (S.size)%4); // S
    cnt += A.count() + (4 - (A.count())%4); // A
    return cnt;
  }

  void materialize(Materializer m) {
    uint32 __in; // an input uint32
    __in = m.format(__in); // Always read the id
    if (__in != __id)
      throw InvalidArgumentError(sfmt `Invalid message signature 0x$(radix(__in, 16)), expected 0x$(radix(__id, 16))`);
    int1 = m.format(int1, "int1");
    uint2 = m.format(uint2, "uint2");
    int3 = m.format(int3, "int3");
    uint4 = m.format(uint4, "uint4");
    S = m.format(S, "S");
    A = m.format(A, "A");
  }
}

//------------------------------------------------------------------------------
class testSerializeContainer_Base {
  uint32 __id = 0x6f42935f;
  uint32 getId() { return __id; }
  testSerialize_Base T;

  void serialize(Serializer sr, Buffer name) {
    sr.format(__id, "__whipMessageId");    T.serialize(sr, "T");
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += T.sizeNeeded(); // T
    return cnt;
  }

  void materialize(Materializer m) {
    uint32 __in; // an input uint32
    __in = m.format(__in); // Always read the id
    if (__in != __id)
      throw InvalidArgumentError(sfmt `Invalid message signature 0x$(radix(__in, 16)), expected 0x$(radix(__id, 16))`);
    T.materialize(m, "T");
  }
}

