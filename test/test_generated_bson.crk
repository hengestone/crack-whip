// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-06-03 14:43:45 DST

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer, Serializable;
import crack.db.mongo Oid;
FStr sfmt = {};

//------------------------------------------------------------------------------
class testSerialize : Serializable {
  uint32 __id = 0x33a98818;
  uint32 getId() { return __id; }
  int int1 = -1;
  uint uint2 = 1;
  int32 int3 = 2;
  uint32 uint4 = 3;
  String S = "Hello";
  Array[int] A = [10];
  oper init() { }


  void serialize(Serializer __sr, Buffer __name) {
    uint i = 0;
    __sr.prefix(__name);
    __sr.format(int1, "int1");
    __sr.format(uint2, "uint2");
    __sr.format(int3, "int3");
    __sr.format(uint4, "uint4");
    __sr.format(S, "S");
    __sr.format(A, "A");
    __sr.postfix(__name);
  }

  void serialize(Serializer __sr) {
    serialize(__sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += INT_SIZE; // int1
    cnt += INT_SIZE; // uint2
    cnt += 4; // int3
    cnt += 4; // uint4
    cnt += S.size + (4 - (S.size)%4); // S
    cnt += A.count() + (4 - (A.count())%4); // A
    return cnt;
  }

  void materialize(Materializer __mt, Buffer __name) {
    __mt.prefix(__name);
    int1 = __mt.format(int1, "int1");
    uint2 = __mt.format(uint2, "uint2");
    int3 = __mt.format(int3, "int3");
    uint4 = __mt.format(uint4, "uint4");
    S = __mt.format(S, "S");
    A = __mt.format(A, "A");
    __mt.postfix(__name);
  }

  void materialize(Materializer __mt) {
    materialize(__mt, null);
  }

  oper init(Materializer __mt, Buffer __name) {
     materialize(__mt, __name);
  }

  oper init(Materializer __mt) {
     materialize(__mt, null);
  }
}

//------------------------------------------------------------------------------
class testContainer : Serializable {
  uint32 __id = 0x7580cae3;
  uint32 getId() { return __id; }
  Array[testSerialize] T = {};
  oper init() { }


  void serialize(Serializer __sr, Buffer __name) {
    uint i = 0;
    __sr.prefix(__name);
    if (true) {
      asr := __sr.startArray(T.count(), "T");
      i = 0;
      for (el :in T) {
        asr.appendItem(el, i++);
      }
      __sr.endArray(asr, "T");
    }
    __sr.postfix(__name);
  }

  void serialize(Serializer __sr) {
    serialize(__sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    for (el :in T) { // T
      cnt += el.sizeNeeded();
    }
    return cnt;
  }

  void materialize(Materializer __mt, Buffer __name) {
    __mt.prefix(__name);
    if (true) {
      T.clear();
      it := __mt.iter("T");
      while (it.next()) {
        T.append(testSerialize(it.elem(), null));
      }
    }
    __mt.postfix(__name);
  }

  void materialize(Materializer __mt) {
    materialize(__mt, null);
  }

  oper init(Materializer __mt, Buffer __name) {
     materialize(__mt, __name);
  }

  oper init(Materializer __mt) {
     materialize(__mt, null);
  }
}

