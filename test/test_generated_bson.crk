// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-05-25 16:37:59 DST

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io Formatter, FStr, cerr, cout;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer, Serializable;
import crack.regex escape, Regex, Match;

FStr sfmt = {};

//------------------------------------------------------------------------------
class testSerialize_Base : Serializable {
  uint32 __id = 0x33a98818;
  uint32 getId() { return __id; }
  int int1 = -1;
  uint uint2 = 1;
  int32 int3 = 2;
  uint32 uint4 = 3;
  String S = "Hello";
  Array[int] A = [10];

  oper init() {}

  void serialize(Serializer sr, Buffer name) {
    sr.prefix(name);
    sr.format(int1, "int1");
    sr.format(uint2, "uint2");
    sr.format(int3, "int3");
    sr.format(uint4, "uint4");
    sr.format(S, "S");
    sr.format(A, "A");
    sr.postfix(name);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += INT_SIZE; // int1
    cnt += INT_SIZE; // uint2
    cnt += 4; // int3
    cnt += 4; // uint4
    cnt += S.size + (4 - (S.size)%4); // S
    cnt += A.count() + (4 - (A.count())%4); // A
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    int1 = mt.format(int1, "int1");
    uint2 = mt.format(uint2, "uint2");
    int3 = mt.format(int3, "int3");
    uint4 = mt.format(uint4, "uint4");
    S = mt.format(S, "S");
    A = mt.format(A, "A");
    mt.postfix(name);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  void format(Formatter fmt) {
      fmt `S: $S`;
  }
}

//------------------------------------------------------------------------------
class testContainer_Base : Serializable {
  uint32 __id = 0x7580cae3;
  uint32 getId() { return __id; }
  Array[testSerialize_Base] T = {};

  oper init() {}

  void serialize(Serializer sr, Buffer name) {
    cerr `testContainer_Base::serialize($sr, $name)\n`;
    sr.prefix(name);
    asr := sr.startArray(T.count(), "T");
    uint i = 0;
    for (el :in T) { 
        asr.appendItem(el, i++);
    }
    sr.endArray(asr, "T");
    sr.postfix(name);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    for (el :in T) { // T
      cnt += el.sizeNeeded();
    }
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    T.clear();
    it := mt.iter("T");
    while (it.next()) {
        T.append(testSerialize_Base(it.elem(), null));
    }
    mt.postfix(name);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  void format(Formatter fmt) {
      uint i = 0;
      for (t :in T) {
        fmt `T[$i] = $t\n`;
        i++;
    }
  }
}

