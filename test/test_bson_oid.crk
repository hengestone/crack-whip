// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-09-20 14:32:04 DST

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer, Serializable;
import crack.db.mongo_support OID;
FStr sfmt = {};

//------------------------------------------------------------------------------
class testOid : Serializable {
  uint32 __id = 0x92104027;
  uint32 getId() { return __id; }
  OID __uuid;
  String name;
  oper init() { }

  void set__uuid(OID new__uuid) { __uuid = new__uuid }
  OID get__uuid() { return __uuid }


  void serialize(Serializer __sr, Buffer __name) {
    uint i = 0;
    __sr.prefix(__name);
    __sr.format(__uuid, "__uuid");
    __sr.format(name, "name");
    __sr.postfix(__name);
  }

  void serialize(Serializer __sr) {
    serialize(__sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += 12; // __uuid
    cnt += name.size + (4 - (name.size)%4); // name
    return cnt;
  }

  void materialize(Materializer __mt, Buffer __name) {
    __mt.prefix(__name);
    __uuid = __mt.format(__uuid, "__uuid");
    name = __mt.format(name, "name");
    __mt.postfix(__name);
  }

  void materialize(Materializer __mt) {
    materialize(__mt, null);
  }

  oper init(Materializer __mt, Buffer __name) {
     materialize(__mt, __name);
  }

  oper init(Materializer __mt) {
     materialize(__mt, null);
  }
}

