// Test for Entity class
import crack.io FStr, cerr;
import crack.logger cerrLogger, DEBUG, ERROR;
import crack.net Poller, POLLIN, POLLOUT;
import crack.runtime exit;
import crack.strutil StringArray;
import crack.time TimeDelta, seconds;
import whip.interpreter ShellInterpreter, RubyInterpreter, INTP_DONE, INTP_ERROR,
                        INTP_BUSY, INTP_READY, INTP_NEW, Interpreter;
import whip.sockserver InterpreterContainer;


cerrLogger.setLevel(DEBUG);
cerrLogger.setNamedFields("progname datetime severity msg");
server := InterpreterContainer(cerrLogger);
delay := seconds(1);

RubyInterpreter rintp = {cerrLogger};
rintp.setMaxCmds(5);
server.add(rintp);

int oldstatus = rintp.status;
int i = 0;
sfmt := FStr();

while (i<11){

  if (rintp.exe(sfmt `puts('hello ruby $(i)' )\n`) == INTP_ERROR)
    break;
  oldstatus = rintp.status;
  while (1) {
    cerrLogger.debug(FStr() `oldstatus = $(rintp.status)`);
    changes := server.processOnce(delay);
    if (changes){
      int status = rintp.getStatusChange();
      cerrLogger.debug(FStr() `$i: status= $(rintp.status), oldstatus= $oldstatus, changes = $changes`);
      while (status >= 0){
        if (status != rintp.status)
          oldstatus = rintp.status;
        rintp.status = status;
          // Check for done or error status here
        status = rintp.getStatusChange();
      }
    }
    cerrLogger.debug(FStr() `$i:: status= $(rintp.status), oldstatus= $oldstatus, changes = $changes`);
    if ((oldstatus == INTP_DONE || oldstatus == INTP_ERROR) && rintp.status == INTP_READY)  break;
    else if (rintp.status == INTP_NEW && oldstatus == INTP_READY) break; // interpreter was restarted
  }
  i++;
}
