// Serializable/Materializable base class writer
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.io Formatter;
import crack.runtime usecs;
import crack.strutil StringArray;
import crack.time Date;
import whip.generator ClassGenerator, Message, sfmt;

d := Date(usecs());

String preamble = sfmt
I`// Serializable/Materializable base class autogenerated by CrackMessageGenerator
  // $d

  import crack.cont.array Array;
  import crack.runtime INT_SIZE;
  import whip.serializer Serializer, Materializer;

  `;

// Generate class definitions
class CrackClassGenerator : ClassGenerator {

  oper init(StringArray builtins0, StringArray sizes) :
            ClassGenerator(builtins0, sizes) {
  }

  // Write member defs
  int _writeDefs(Formatter fmt, Message msg) {
    uint cnt = 0;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      fmt `$(indent)$(member.type) $fname`;

      // Write default value
      if (!(member.default is null))
        fmt ` = $(member.default)`;
      fmt.write(";\n");
      cnt++;
    }
    return cnt;
  }

  // Write serialization method
  int _writeSerialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)void serialize(Serializer sr) {\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (builtins.hasKey(member.type))
        fmt `$(indent*2)sr.format($fname);\n`;
      else
        fmt `$(indent*2)$(fname).serialize(sr);\n`;
      cnt++;
    }
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write materialize method
  int _writeMaterialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)void materialize(Materializer m) {\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (builtins.hasKey(member.type))
        fmt `$(indent*2)$fname = m.format($fname);\n`;
      else
        fmt `$(indent*2)$(fname).materialize(m);\n`;
      cnt++;
    }
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write serialization method
  int _writeSize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)uint sizeNeeded() {\n`;
    fmt `$(indent*2)uint cnt = 0;\n`;

    for (fitem :in msg.fields) {
      fname := fitem.key;
      member := fitem.val;
      sz := builtins.get(member.type);
      if (sz) {
        if (sz[0] == b".") {
          fmt `$(indent*2)cnt += $(fname)$(sz)`;
        }
        else {
          fmt `$(indent*2)cnt += $(sz)`;
        }
      }
      else
        fmt `$(indent*2)cnt += $(fname).sizeNeeded()`;
      fmt `; // $fname\n`;
      cnt++;
    }
    fmt `$(indent*2)return cnt;\n`;
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write all class definition to writer
  int create(Formatter fmt) {
    uint iLevel = 0, cnt = 0; // indent level

    fmt.write(preamble);

    for (item :in messages) {
      name := item.key;
      msg := item.val;

      fmt `//$("-"*78)\n`;
      fmt `class $(name)_Base {\n`;
      _writeDefs(fmt, msg);
      _writeSerialize(fmt, msg);
      _writeSize(fmt, msg);
      _writeMaterialize(fmt, msg);
      fmt.write("}\n\n");
      cnt++;
    }
    return cnt;

  }
}
