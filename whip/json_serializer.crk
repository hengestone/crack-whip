// Class serialization/deserialization using supplied functions
import crack.io Formatter, Writer, cout, FDReader, FDWriter, FStr;
import crack.lang ManagedBuffer, Buffer, InvalidArgumentError,
                  InvalidResourceError,  AssertionError;
import crack.runtime INT_SIZE;
import crack.strutil StringArray;
import crack.ascii hex;
import crack.cont.array Array;
import crack.cont.hashmap HashMap, OrderedHashMap;
import crack.enc.json.parser JsonParser;
import crack.enc.json.lib UnexpectedToken, ParseException,
                      JsonFormatter, JsonStringFormatter, JsonObject,
                      JsonArray, JsonInt, JsonFloat, JsonBool, JsonString;

import whip.serializer Materializer, Serializer, Serializable;
@import crack.ann define;

StringArray basicTypes = ["int", "String", "float", "bool", "object",
                          "array[int]", "array[string]", "array[float]",
                          "array[bool]", "array[object]"
                         ];

StringArray crackTypes = ["int32", "uint32", "int64", "uint64",
                          "String", "float32", "float64", 
                          "Array[int]", "Array[uint]", "Array[int32]",
                          "Array[uint32]", "Array[int64]", "Array[uint64]",
                          "Array[float32]", "Array[float64]",
                         ];

StringArray crackSizes = ["4", "4", "8", "8", ".size", "4", "8",
                          ".count()", ".count()", ".count()", 
                          ".count()", ".count()", ".count()",
                          ".count()", ".count()"];
                          

uint id = 0;

class noCopyStringFormatter : JsonStringFormatter {
    oper init(): JsonStringFormatter() {}
    oper init() : JsonStringFormatter() {}
    Buffer getBuffer() { return Buffer(_writer.buffer, _writer.size); }
}

// Serializer for JSON formatter buffers
class JSONBufferSerializer : Serializer {

    noCopyStringFormatter _jsonBuf;
    //ManagedBuffer _jsonBuf;
    Array[bool] _sepStack = {};
    uint __id;

    void _setup() {
        writeId = false;
        hasPrefix = true;
        hasPostfix = true;
        itemSep = ", ";
        __id = id++;
    }

    oper init () : _jsonBuf() {
        _setup();
    }

    oper init (uint bufsize) {
        _setup();
    }

    oper init(noCopyStringFormatter fmt) : _jsonBuf = fmt {
        _setup();
    }

    oper init(FDWriter w) : _jsonBuf = null {
        throw InvalidResourceError("Not implemented");
    }

    void prefix(Buffer name) {
        if (!(name is null) && name.size > 0) {
            write(FStr() `$name:`);
        }
        write("{");
    }

    void postfix(Buffer name) {
        if (_sepStack.count() > 0)
            _sepStack.pop();
        write("}");
    }

    Buffer serialized() {
        if (_jsonBuf is null) {
            throw InvalidResourceError("Internal buffer is null");
        }
        return _jsonBuf.getBuffer();
    }

    void _pushSep() {
        _sepStack.append(true);
    }

    void _popSep() {
        if (_sepStack.count() > 0) {
            _sepStack.pop();
            _jsonBuf.write(itemSep);
        }
    }

    void _popSepQuiet() {
        if (_sepStack.count() > 0) {
            _sepStack.pop();
        }
    }

    

    @define formatMethod(T) {
        void format(T val, Buffer name) {
            _popSep();
            _jsonBuf.format(name);
            _jsonBuf.write(": ");
            _jsonBuf.format(val);
            _pushSep();
        }

        void format(Array[T] val, Buffer name) {
            _popSep();
            _jsonBuf.format(name);
            _jsonBuf.write(": [");

            bool first = true;
            for (elem :in val) {
                if (!first)
                    _jsonBuf.write(", ");
                else
                    first = false;
                _jsonBuf.format(elem);
            }
            _jsonBuf.write("]");
            _pushSep();
        }
    }

    @formatMethod(int)
    @formatMethod(uint)

    @formatMethod(int16)
    @formatMethod(uint16)

    @formatMethod(int32)
    @formatMethod(uint32)

    @formatMethod(int64)
    @formatMethod(uint64)

    @formatMethod(float32)
    @formatMethod(float64)
    @formatMethod(bool)

    @formatMethod(String)

    Serializer startArray(uint size, Buffer name) {
        _popSep();
        if (name) {
            _jsonBuf.format(name);
            _jsonBuf.write(": ");
        }
        _jsonBuf.write("[");
        _pushSep();
        return JSONBufferSerializer(_jsonBuf);
    }

    bool appendItem(Serializable obj, uint ind) {
        _popSep();
        obj.serialize(JSONBufferSerializer(_jsonBuf), null);
        _pushSep();
        return true;
    }

    bool endArray(Serializer sr, Buffer name) {
        sr.write("]");
        return true;
    }

    void write(Buffer buf) {
        _jsonBuf.write(buf);
    }
}

class JSONBufferMaterializer : Materializer {

    Buffer _jsonBuf;
    JsonParser _parser;
    JsonObject _result;

    void _initResult(Object result) {
        if (result.isa(JsonObject))
            _result = JsonObject.cast(result);
        else
            throw InvalidArgumentError("JSON text must have an object (map) result");
    }

    oper init() {} // Needed for generator

    oper init(Buffer buf) : _jsonBuf = buf, _parser() {
        _initResult(_parser.parse(_jsonBuf).result);
    }

    oper init(Object jsonObject) : _jsonBuf = null {
        _initResult(jsonObject);
    }

    oper init(FDReader r) : _jsonBuf = null {
        throw InvalidResourceError("Not implemented");
    }

    Buffer getBuffer() {
        return _jsonBuf;
    }

    JsonObject getResult() {
        return _result;
    }

    void prefix(Buffer name) {  }

    void postfix(Buffer name) {  }


    @define formatMethodDirect(T, jT) {
        T format(T val, Buffer name) {
            return jT.cast(_result[String(name)]).value;
        }

        Array[T] format(Array[T] val, Buffer name) {
            jA := JsonArray.cast(_result[String(name)]);
            A := Array[T](jA.count());
            for (elem :in jA) {
                A.append(jT.cast(elem).value);
            }
            return A;
        }

        OrderedHashMap[String, T] format(OrderedHashMap[String, T] map, Buffer name) {
            jM := JsonObject.cast(_result);
            M := OrderedHashMap[String, T]();
            for (item :in jM) {
                M[item.key] = jT.cast(item.val).value;
            }
            return M;
        }
    }

    @define formatMethodSimple(T, jT) {
        T format(T val, Buffer name) {
            return T(jT.cast(_result[String(name)]).value);
        }

        Array[T] format(Array[T] val, Buffer name) {
            jA := JsonArray.cast(_result[String(name)]);
            A := Array[T](jA.count());
            for (elem :in jA) {
                A.append(T(jT.cast(elem).value));
            }
            return A;
        }

        OrderedHashMap[String, T] format(OrderedHashMap[String, T] map, Buffer name) {
            jM := JsonObject.cast(_result);
            M := OrderedHashMap[String, T]();
            for (item :in jM) {
                M[item.key] = T(jT.cast(item.val).value);
            }
            return M;
        }
    }

    @define formatMethodComplex(T, jT) {
        T format(T val, Buffer name) {
            return T(jT.cast(_result[String(name)]));
        }

        Array[T] format(Array[T] val, Buffer name) {
            jA := Array[T].cast(_result[String(name)]);
            A := Array[T](jA.count());

            for (elem :in jA) {
                A.append(T(jT.cast(elem)));
            }
            return A;
        }

        OrderedHashMap[String, T] format(OrderedHashMap[String, T] map, Buffer name) {
            jM := JsonObject.cast(_result);
            M := OrderedHashMap[String, T]();
            for (item :in jM) {
                M[item.key] = T(jT.cast(item.val));
            }
            return M;
        }
    }


    @formatMethodDirect(int, JsonInt)
    @formatMethodSimple(uint,JsonInt)

    @formatMethodSimple(int16, JsonInt)
    @formatMethodSimple(int32, JsonInt)
    @formatMethodSimple(uint16, JsonInt)
    @formatMethodSimple(uint32, JsonInt)

    @formatMethodSimple(int64, JsonInt)
    @formatMethodSimple(uint64, JsonInt)

    @formatMethodDirect(float, JsonFloat)
    @formatMethodSimple(float32, JsonFloat)
    @formatMethodSimple(float64, JsonFloat)
    @formatMethodDirect(bool, JsonBool)

    @formatMethodComplex(String, JsonString)

    void write(Buffer buf) { }

    class JSONBufferMaterializerIter : MaterializerIter {
        int __index = -1;
        bool __first = true;;
        JsonArray __A = null;
        

        oper init(Materializer mt, Buffer name) {
            if (!mt.isa(JSONBufferMaterializer))
                throw InvalidArgumentError("JSONBufferMaterializerIter constructor called with incorrect Materializer type");
            jmt := JSONBufferMaterializer.cast(mt);
            if (jmt.getResult().count() > 0) {
                obj := jmt.getResult()[String(name)];
                if (!obj.isa(JsonArray))
                    throw InvalidResourceError("Attempting to iterate through non-Array");
                __A = JsonArray.cast(obj);
            }
        }

        bool nx() {
            if (__first) {
                __first = false;
                return !(__A is null) && __A.count() > 0;
            } else {
                return next();
            }
        }

        bool next() { return ++__index < __A.count();}
        
        Materializer elem() {
            obj := __A[__index];
            if (!obj.isa(JsonObject))
                throw InvalidResourceError("Attempting to access JsonArray item as a JsonObject");
            return JSONBufferMaterializer(JsonObject.cast(obj));
        }
    }

    MaterializerIter iter(Buffer name) {
        return JSONBufferMaterializerIter(this, name);
    }


}
