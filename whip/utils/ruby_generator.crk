// Serializable/Materializable base class writer
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.ascii toLower, capitalize, radix;
import crack.io Formatter;
import crack.strutil StringArray;
import crack.time Date;
import whip.utils.generator ClassGenerator, Message, sfmt;

d := Date.now();

String preamble = sfmt
`# Serializable/Materializable base class autogenerated by RubyClassGenerator
# $d

require "xdr_serializer"

`;

// Generate class definitions
class RubyClassGenerator : ClassGenerator {
  String __cname;

  oper init(StringArray builtins0, StringArray sizes) :
            ClassGenerator(builtins0, sizes) {
  }

  // Write member defs
  int _writeDefs(Formatter fmt, Message msg) {
    uint cnt = 0;

    fmt `$(indent)attr_accessor `;
    bool first = true;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (!first) fmt.write(", ");
      fmt `:$fname`;
      first = false;
    }

    fmt `\n\n$(indent)def initialize\n`;
    fmt `$(indent*2)@__id = 0x$(radix( msg.hash(__cname), 16))\n`;

    for (fitem :in msg.fields) {
      fname := fitem.key;
      member := fitem.val;
      fmt `$(indent*2)@$fname`;

      // Write default value
      if (!(member.default is null))
        fmt ` = $(member.default)`;
      else
        fmt ` = nil`;
      fmt.write("\n");
      cnt++;
    }

    fmt `$(indent)end\n\n`;

    fmt I`$(indent)def getId\n \
          $(indent*2)return @__id\n \
          $(indent)end\n`;
    return cnt;
  }

  // Write serialization method
  int _writeSerialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)def serialize(sr)\n`;
    fmt `$(indent*2)sr.uint32(@__id);\n`; // Always write the id\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (builtins.hasKey(member.type)) {
        if (member.type.size > 5 && member.type.substr(0, 5) == "Array") {
          l := member.type.size;
          subtype := toLower(member.type.slice(6, l - 1));
          if (builtins.hasKey(subtype))
            fmt `$(indent*2)sr.array(@$(fname), sr.$(subtype)_lambda)\n`;
          else
            fmt `$(indent*2)sr.array(@$(fname), $(subtype))\n`;
        }
        else
          fmt `$(indent*2)sr.$(toLower(member.type))(@$fname);\n`;
      }
      else
        fmt `$(indent*2)$(fname).serialize(sr);\n`;
      cnt++;
    }
    fmt `$(indent)end\n`;
    return cnt;
  }

  // Write materialize method
  int _writeMaterialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt I`\n$(indent)def materialize(m)\n \
          $(indent*2)__new_id=m.uint32()\n \
          $(indent*2)raise 'message id mismatch for $(capitalize(__cname)), got #{__new_id}, expected #{@__id}' if __new_id != @__id\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      fmt `$(indent*2)`;
      if (builtins.hasKey(member.type)) {
        if (member.type.size > 5 && member.type.substr(0, 5) == "Array") {
          l := member.type.size;
          subtype := toLower(member.type.slice(6, l - 1));
          if (builtins.hasKey(subtype))
            fmt `@$(fname) = m.array(m.$(subtype)_lambda, nil)\n`;
          else
            fmt `@$(fname) = m.array(nil, $(subtype))\n`; // Compound Array
        } else {
          fmt `@$fname = m.$(toLower(member.type))()\n`;
        }
      }
      else {
        fmt `@$(fname).materialize(m)\n`; // Compound type
      }
      cnt++;
    }
    fmt `$(indent)end\n`;
    return cnt;
  }

  // Write serialization method
  int _writeSize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)def sizeNeeded()\n`;
    fmt `$(indent*2)cnt = 4;\n`;

    for (fitem :in msg.fields) {
      fname := fitem.key;
      member := fitem.val;
      sz := builtins.get(member.type);
      if (sz) {
        if (sz[0] == b".") {
          fmt `$(indent*2)cnt += $(fname)$(sz) + (4 - ($(fname)$(sz))%4)`;
        }
        else {
          fmt `$(indent*2)cnt += $(sz)`;
        }
      }
      else
        fmt `$(indent*2)cnt += $(fname).sizeNeeded()`;
      fmt ` # $fname\n`;
      cnt++;
    }
    fmt `$(indent*2)return cnt\n`;
    fmt `$(indent)end\n`;
    return cnt;
  }

  // Write all class definition to writer
  int create(Formatter fmt) {
    uint iLevel = 0, cnt = 0; // indent level

    fmt.write(preamble);

    for (item :in messages) {
      cname := capitalize(item.key);
      __cname = item.key;
      msg := item.val;

      fmt `#$("-"*78)\n`;
      fmt `class $(__cname)_Base\n`;
      _writeDefs(fmt, msg);
      _writeSerialize(fmt, msg);
      _writeSize(fmt, msg);
      _writeMaterialize(fmt, msg);
      fmt.write("end\n\n");
      cnt++;
    }
    return cnt;

  }
}
