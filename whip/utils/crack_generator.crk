// Serializable/Materializable base class writer
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.ascii radix, toLower;
import crack.io Formatter, cout;
import crack.lang InvalidArgumentError;
import crack.runtime usecs;
import crack.strutil StringArray;
import crack.time Date;
import whip.serializer Materializer, Serializer, Serializable;
import whip.utils.generator ClassGenerator, Message, sfmt;
import crack.regex escape, Regex, Match;

date := Date.now();

// Preamble start --------------------------------------------------------------
String preamble = sfmt
`// Serializable/Materializable base class autogenerated by CrackClassGenerator
// $date

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer;
import crack.regex escape, Regex, Match;

FStr sfmt = {};\n
`;

rx := Regex(r'Array\[(\w+)\]');

// Generate class definitions
class CrackClassGenerator : ClassGenerator {

  oper init(StringArray builtins0, StringArray sizes) :
            ClassGenerator(builtins0, sizes) {
  }

  // Write member defs
  int _writeDefs(Formatter fmt, Message msg, Serializer sr, Materializer mt) {
    uint cnt = 0;

    for (mitem :in msg.fields){
      mname := mitem.key;
      member := mitem.val;
      mtype := member.type;
      Match m = rx.search(mtype);

      isArray := !(m is null);
      if (isArray) mtype = m.group(1);

      if (builtins.get(mtype, null))
        fmt `$(indent)$(isArray ? "Array[" : "")$(mtype)$(isArray ? "]" : "") $mname`;
      else
        fmt `$(indent)$(isArray ? "Array[" : "")$(mtype)_Base$(isArray ? "]" : "") $mname`;

      // Write default value
      if (!(member.default is null))
        fmt ` = $(member.default)`;
      fmt.write(";\n");
      cnt++;
    }

    return cnt;
  }

  // Write serialization method
  int _writeSerialize(Formatter fmt, Message msg,
                      Serializer sr, Materializer mt) {
    uint cnt = 0;
    itemSep := sr.itemSep.size > 0;

    fmt `\n$(indent)void serialize(Serializer sr, Buffer name) {\n`;
    if (sr.hasPrefix)
      fmt `$(indent*2)sr.prefix(name);\n`;

    if (sr.writeId) {
      fmt `$(indent*2)sr.format(__id, "__whipMessageId");\n`;
      cnt++;
    }

    for (mitem :in msg.fields){
      mname := mitem.key;
      member := mitem.val;
      mtype := member.type;
      Match m = rx.search(mtype);

      isArray := !(m is null);
      if (isArray) mtype = m.group(1);

      if (itemSep && cnt > 0)
        fmt `$(indent*2)sr.write(sr.itemSep);\n\n`;

      if (builtins.hasKey(mtype) || isArray)
        fmt `$(indent*2)sr.format($mname, "$mname");\n`;
      else
        fmt `$(indent*2)$(mname).serialize(sr, "$mname");\n`;
      cnt++;
    }

    if (sr.hasPostfix)
      fmt `$(indent*2)sr.postfix(name);\n`;

    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write materialize method
  int _writeMaterialize(Formatter fmt, Message msg,
                        Serializer sr, Materializer mt) {
    uint cnt = 0;
    fmt `\n$(indent)void materialize(Materializer mt, Buffer name) {\n`;
    if (mt.hasPrefix)
      fmt `$(indent*2)mt.prefix(name);\n`;

    if (sr.writeId) {
      fmt I`$(indent*2)uint32 __in; // an input uint32\n \
            $(indent*2)__in = mt.format(__in, "__whipMessageId"); // Always read the id\n \
            $(indent*2)if (__in != __id)\n \
            $(indent*3)throw InvalidArgumentError(`;
            fmt.write("sfmt `Invalid message signature 0x");
            fmt.format("$(radix(__in, 16)), expected 0x$(radix(__id, 16))`);\n");
    }

    for (mitem :in msg.fields) {
      mname := mitem.key;
      member := mitem.val;
      mtype := member.type;
      Match m = rx.search(mtype);

      isArray := !(m is null);
      if (isArray) mtype = m.group(1);

      if (builtins.hasKey(mtype))
        fmt `$(indent*2)$mname = mt.format($mname, "$mname");\n`;
      else {
        if (isArray) 
          fmt `$(indent*2)$mname = mt.format(new, "$mname");\n`;
        else
          fmt `$(indent*2)$(mname).materialize(mt, "$mname");\n`;
      }
      cnt++;
    }

    if (mt.hasPostfix)
      fmt `$(indent*2)mt.postfix(name);\n`;

    fmt `$(indent)}\n`;

    // Write constructor
    fmt `\n$(indent)oper init(Materializer mt, Buffer name) {\n`;
    fmt `$(indent*2) materialize(mt, name);\n`;
    fmt `$(indent)}\n`;

    return cnt;
  }

  // Write sizeNeeded method
  int _writeSize(Formatter fmt, Message msg,
                 Serializer sr, Materializer mt) {
    uint cnt = 0;
    fmt `\n$(indent)uint sizeNeeded() {\n`;
    fmt `$(indent*2)uint cnt = 4;  // The 32bit id is always there\n`;

    for (mitem :in msg.fields) {
      mname := mitem.key;
      member := mitem.val;
      mtype := member.type;
      Match m = rx.search(mtype);

      isArray := !(m is null);

      sz := builtins.get(mtype);
      if (sz) {
        if (sz[0] == b".") {
          fmt `$(indent*2)cnt += $(mname)$(sz) + (4 - ($(mname)$(sz))%4)`;
        }
        else {
          fmt `$(indent*2)cnt += $(sz)`;
        }
        fmt `; // $mname\n`;
      }
      else {
        if (isArray) {
          if (sz)
            fmt `$(indent*2)cnt += $(mname).count() * $(sz); // $mname\n`;
          else {
            fmt `$(indent*2)for (el :in $(mname)) { // $mname\n`;
            fmt `$(indent*3)cnt += el.sizeNeeded();\n`;
            fmt `$(indent*2)}\n`;
          }
        }
        else
          fmt `$(indent*2)cnt += $(mname).sizeNeeded(); // $mname\n`;
      }
      cnt++;
    }
    fmt `$(indent*2)return cnt;\n`;
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write all class definition to writer
  int create(Formatter fmt, Serializer sr, Materializer mt) {
    uint iLevel = 0, cnt = 0; // indent level

    fmt.write(preamble);

    for (item :in messages) {
      name := item.key;
      msg := item.val;

      fmt `//$("-"*78)\n`;
      fmt `class $(name)_Base {\n`;
      fmt `$(indent)uint32 __id = 0x$(radix( msg.hash(name), 16));\n`;
      fmt `$(indent)uint32 getId() { return __id; }\n`;
      _writeDefs(fmt, msg, sr, mt);
      _writeSerialize(fmt, msg, sr, mt);
      _writeSize(fmt, msg, sr, mt);
      _writeMaterialize(fmt, msg, sr, mt);

      fmt.write("}\n\n");
      cnt++;
    }
    return cnt;
  }
}
