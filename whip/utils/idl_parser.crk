
# line 1 "ragel/idl_parser.rl"
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
// 7/17/2012

import crack.ascii parseInt, parseBool, radix;
import crack.cont.array Array;
import crack.cont.hashmap OrderedHashMap;
import crack.cont.list List;
import crack.exp.file File;
import crack.io FStr, cout, cerr, StringFormatter, Reader, StringWriter;
import crack.lang AppendBuffer, InvalidResourceError, Buffer, Formatter,
                  WriteBuffer, Exception, IndexError, KeyError, CString;
import crack.math min, strtof;
import crack.runtime memmove, mmap, munmap, Stat, fopen, PROT_READ, MAP_PRIVATE,
                    stat, fileno;
import crack.sys strerror;
import crack.io.readers PageBufferString, PageBufferReader, PageBuffer;
import whip.utils.generator Message, ClassGenerator;

uint indentWidth = 2;

class ParseError : Exception {
    oper init(String text) : Exception(text) {}
    oper init() {}
}

class idlParser {

    ClassGenerator gen;
    PageBuffer data;
    uint data_size = 0, eof = 0, s, e, p, pe, cs, ts, te, act, okp, bufsize = 1024*1024;
    int line = 1, col = 1;

    void _readTo(uint i){
        if (i>data.size){
            try {
                b:=data[i];
            }
            catch (IndexError ex){
            }
            pe = data.size;
        }
    }

    
# line 65 "ragel/idl_parser.rl"


    
# line 52 "whip/utils/idl_parser.crk"
Array[uint] _spec_actions = [
  0, 1, 0, 1, 1
];

Array[uint] _spec_trans_keys = [
  0, 0, 9, 109, 101, 101, 
  115, 115, 115, 115, 97, 
  97, 103, 103, 101, 101, 
  9, 32, 9, 122, 9, 122, 
  9, 123, 9, 32, 9, 
  125, 9, 32, 9, 109, 
  0
];

Array[uint] _spec_key_spans = [
  0, 101, 1, 1, 1, 1, 1, 1, 
  24, 114, 114, 115, 24, 117, 24, 101
];

Array[uint] _spec_index_offsets = [
  0, 0, 102, 104, 106, 108, 110, 112, 
  114, 139, 254, 369, 485, 510, 628, 653
];

Array[uint] _spec_indicies = [
  0, 0, 0, 0, 0, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 0, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 2, 1, 3, 1, 
  4, 1, 5, 1, 6, 1, 7, 1, 
  8, 1, 9, 9, 9, 9, 9, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 9, 1, 9, 9, 9, 9, 9, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 9, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 1, 1, 1, 
  1, 10, 1, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 10, 10, 10, 
  10, 10, 10, 10, 10, 1, 11, 11, 
  11, 11, 11, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 11, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 12, 1, 1, 12, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 1, 
  1, 1, 1, 1, 1, 1, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  1, 1, 1, 1, 12, 1, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  12, 12, 12, 12, 12, 12, 12, 12, 
  1, 13, 13, 13, 13, 13, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  13, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 14, 1, 14, 15, 14, 
  14, 15, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 14, 1, 14, 15, 
  14, 14, 15, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 14, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 16, 1, 16, 17, 16, 16, 
  17, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 16, 1, 17, 17, 17, 
  17, 17, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 17, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 2, 1, 0
];

Array[uint] _spec_trans_targs = [
  1, 0, 2, 3, 4, 5, 6, 7, 
  8, 9, 10, 11, 10, 11, 12, 13, 
  14, 15
];

Array[uint] _spec_trans_actions = [
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 1, 3, 0, 0, 0, 0, 
  0, 0
];

uint spec_start = 1;
uint spec_first_final = 15;
uint spec_error = 0;

uint  spec_en_main = 1;


# line 68 "ragel/idl_parser.rl"

    void reset(){
        p = s = 0;

        
# line 200 "whip/utils/idl_parser.crk"
  cs = spec_start;

# line 73 "ragel/idl_parser.rl"
    }

    oper init (ClassGenerator gen0) : gen = gen0 { }

    int _parse() {    // Do the first read. 
        if (data is null)
            InvalidResourceError(FStr() `Error parsing IDL, null data pointer supplied`);
        uint s, e, parseLoops = 0;
        String curName, curMsg;

        pe = data_size;
        cs = spec_start;
        while (parseLoops <2 && p < pe){
        // ------ Start exec ---------------------------------------------------------
        
# line 219 "whip/utils/idl_parser.crk"
#  ragel flat exec

  bool testEof = false;
  uint _slen = 0;
  uint _trans = 0;
  uint _keys = 0;
  uint _inds = 0;
  uint _acts = 0;
  uint _nacts = 0;
  uint _tempval = 0;
  uint _goto_level = 0;
  uint _resume = 10;
  uint _eof_trans = 15;
  uint _again = 20;
  uint _test_eof = 30;
  uint _out = 40;

  while(true) { # goto loop
    bool _trigger_goto = false;
    if (_goto_level <= 0) {

# noEnd
      if (p == pe){
        _goto_level = _test_eof;
        continue;
      }


# errState != 0
      if (cs == 0){
        _goto_level = _out;
       continue;
      }
    } # _goto_level <= 0

     if (_goto_level <= _resume){
      _keys = cs << 1; // LOCATE_TRANS
      _inds = _spec_index_offsets[cs];
      _slen = _spec_key_spans[cs];

      if (   _slen > 0 && 
         _spec_trans_keys[_keys] <= data[p] && 
         data[p] <= _spec_trans_keys[_keys + 1]) 
        _trans = _spec_indicies[ _inds + data[p] - _spec_trans_keys[_keys] ]; 
      else _trans =_spec_indicies[ _inds + _slen ];

    cs = _spec_trans_targs[_trans];

    if (_spec_trans_actions[_trans] != 0) {
      _acts = _spec_trans_actions[_trans];
      _nacts = _spec_actions[_acts];
      _acts += 1;

      while (_nacts > 0) {
        _nacts -= 1;
        _acts += 1;
        _tempval = _spec_actions[_acts - 1];

     # start action switch
    if (_tempval  == 0) { // FROM_STATE_ACTION_SWITCH
# line 48 "ragel/idl_parser.rl" # end of line directive
     s = e = p;     // ACTION
    }
    else  if (_tempval  == 1) { // FROM_STATE_ACTION_SWITCH
# line 49 "ragel/idl_parser.rl" # end of line directive
    
          e = p;
          curName = data.substr(s, e - s);
          cout `curName = $curName\n`;
            // ACTION
    }
# line 291 "whip/utils/idl_parser.crk" # end of line directive
    # end action switch
      } # while _nacts
    }

    if (_trigger_goto) continue;
    } # endif 

    if (_goto_level <= _again) {
      if (cs == 0) {
        _goto_level = _out;
        continue;
      }
      p += 1;
      if (p != pe) {
        _goto_level = _resume;
        continue;
      }
    } # _goto_level <= _again

    if (_goto_level <= _test_eof) {
    } # _goto_level <= _test_eof

    if (_goto_level <= _out) break;
    } # endif _goto_level <= out

  # end of execute block
# line 88 "ragel/idl_parser.rl"
        // ------ End exec -----------------------------------------------------------
            _readTo(pe+1); // Update pe just in case we got stuck at the end of a page by accident
            if (p < pe ) parseLoops++;
        }

        /* Check if we failed. */
        if ( cs == spec_error ) {
            /* Machine failed before finding a token. */
            throw ParseError(data.substr(s, p - s));
        }

        if (p < pe) {
            uint lineNumber = 1;
            for (uint i = 0; i < p; i++)
                if (data[i] == b'\n') lineNumber++;
            throw InvalidResourceError(FStr() `Error parsing IDL on line $lineNumber near: $(data.substr(p, min(32, pe-p)))`);
        }

        return gen.messages.count();
    }

    int parse(String spec) {
        data = PageBufferString(spec);
        data_size = spec.size;
        return _parse();
    }

    int parse(Reader r) {
        data = PageBufferReader(r); // Reads one block
        data_size = data.size; 
        return _parse();
    }

    int parseFile(String fname) {
        Stat statInfo = {};
        n := CString(fname);
        statErrors := stat(n.buffer, statInfo);
        if (!statErrors){
            mode := "r";
            file := fopen(n.buffer, mode.buffer);

            if (file is null) {
                throw InvalidResourceError(FStr() `$fname: $(strerror())`);
            }
            fd := fileno(file);

            data_size = statInfo.st_size;
            tdata := mmap(null, statInfo.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
            data = PageBufferString(String(byteptr(tdata), data_size, false));
            
            if (uintz(tdata) != uintz(0)-1){
                retval := _parse();
                munmap(tdata, data_size);
                return retval;
            }
            else
                throw InvalidResourceError(FStr() `$fname: $(strerror())`);
        }
        return null;
    }

    void formatTo(Formatter fmt){
      fmt.format(gen);
    }
}
