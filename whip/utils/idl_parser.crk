
# line 1 "ragel/idl_parser.rl"
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
// 7/17/2012

import crack.cont.hashmap OrderedHashMap;
import crack.strutil StringArray, split;
import crack.cont.list List;
import crack.cont.array Array;
import crack.io FStr, cout, cerr, Reader;
import crack.lang AppendBuffer, InvalidResourceError, Buffer, Formatter,
                  Exception, IndexError, CString;
import crack.runtime memmove, mmap, munmap, Stat, fopen, PROT_READ, MAP_PRIVATE,
                    stat, fileno, free, CFile;
import crack.sys strerror;
import crack.math min;
import crack.io.readers PageBufferString, PageBufferReader, PageBuffer;
import whip.utils.generator Message, ClassGenerator;
import crack.logger Logger, DEBUG, FATAL, ERROR, INFO;

sfmt := FStr(); // string formatter
uint indentWidth = 2;

class ParseError : Exception {
    oper init(String text) : Exception(text) {}
    oper init() {}
}

class _fileInfo {
    Stat info;
    CString name;
    oper init(Stat si, CString fname) : name=fname, info=si { }

    oper del() {
        if (!(info is null)) free(info);
    }
}

@abstract class idlParserBase {
    ClassGenerator gen;
    PageBuffer data;
    OrderedHashMap[String, bool] filesDone = {};
    OrderedHashMap[String, bool] pathMap = {};
    List[String] filesTodo = {};
    StringArray paths = ["."];
    uint data_size = 0, eof = 0, s, e, p, pe, cs, ts, te, act, okp, bufsize = 1024*1024;
    int line = 1, col = 1;

    Logger logger;

    void _readTo(uint i){
        if (i>data.size){
            try {
                b:=data[i];
            }
            catch (IndexError ex){
            }
            pe = data.size;
        }
    }

    _fileInfo _findFile(String fname) {
        Stat statInfo = {};
        _fileInfo fi = {statInfo, null};
        for (dir :in paths) {
            tryFname := FStr() `$dir/$fname`;
            logger.debug(sfmt `Trying $tryFname`);
            n := CString(tryFname);
            statErrors := stat(n.buffer, statInfo);
            if (!statErrors) {
                fi.name = n;
                return fi;
            }
        }
        throw InvalidResourceError(FStr() `Could not find file $fname in path $(paths.join(":"))`);
    }

    uint addPath(String path) {
        newPath := split(path, ":");
        if (newPath) paths.extend(newPath);
        return paths.count();
    }

    uint setPath(String path) {
        newPath := split(path, ":");
        if (newPath) paths = newPath;
        else
            throw InvalidResourceError(FStr() `Could not determine path array from $(path)`);
        return paths.count();
    }

    uint setPath(StringArray newPath) {
        if (newPath) paths = newPath;
        else
            throw InvalidResourceError(FStr() `Could not determine path array from $(newPath.join(":"))`);
        return paths.count();
    }

    uint __countBytes(Array[String] A) {
        uint total;
        for (elem :in A)
            total += elem.size;
        return total;
    }


    // Taken from strutil.StringArray.join
    String _join(Array[String] A, String sep) {
        # deal with the empty case
        size := A.count();
        if (!size)
            return '';
        
        # figure out how much space we need
        total := __countBytes(A) + sep.size * (size - 1);
        
        AppendBuffer buf = {total};
        first := true;
        for (elem :in A) {
        
            # add the separator for everything but the first string.
            if (first)
                first = false;
            else
                buf.extend(sep);

            buf.extend(elem);
        }
        
        return String(buf, true);

    }

    void updatePathFromFile(String fname) {
        newPath := _join(split(fname, "/").slice(0,-1), "/");
        if (!pathMap.get(newPath)) {
            addPath(newPath);
            pathMap[newPath] = true;
            logger.debug(sfmt `updatePathFromFile($fname): newPath=$newPath`);
        }
        
    }

    @abstract int _parse();
    @abstract int parse(String spec);
    @abstract int parseTodo();
    @abstract int parseFile(String fname_in);

    void formatTo(Formatter fmt) {
      fmt.format(gen);
    }
}

class idlParser : idlParserBase {


    
# line 261 "ragel/idl_parser.rl"


    
# line 163 "whip/utils/idl_parser.crk"
Array[uint] _spec_actions = [
  0, 1, 0, 1, 1, 1, 2, 1, 
  3, 1, 4, 1, 6, 1, 7, 1, 
  8, 1, 9, 2, 4, 5, 2, 4, 
  7, 2, 6, 7
];

Array[uint] _spec_trans_keys = [
  0, 0, 9, 109, 109, 109, 
  112, 112, 111, 111, 114, 
  114, 116, 116, 9, 32, 
  9, 34, 34, 34, 34, 34, 
  9, 59, 101, 101, 115, 
  115, 115, 115, 97, 97, 
  103, 103, 101, 101, 9, 32, 
  9, 122, 9, 123, 9, 
  123, 9, 125, 9, 125, 
  114, 114, 101, 101, 97, 97, 
  100, 100, 111, 111, 110, 
  110, 108, 108, 121, 121, 
  9, 32, 9, 122, 9, 122, 
  9, 122, 9, 122, 9, 
  61, 9, 123, 9, 59, 
  9, 109, 0
];

Array[uint] _spec_key_spans = [
  0, 101, 1, 1, 1, 1, 1, 24, 
  26, 1, 1, 51, 1, 1, 1, 1, 
  1, 1, 24, 114, 115, 115, 117, 117, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  24, 114, 114, 114, 114, 53, 115, 51, 
  101
];

Array[uint] _spec_index_offsets = [
  0, 0, 102, 104, 106, 108, 110, 112, 
  137, 164, 166, 168, 220, 222, 224, 226, 
  228, 230, 232, 257, 372, 488, 604, 722, 
  840, 842, 844, 846, 848, 850, 852, 854, 
  856, 881, 996, 1111, 1226, 1341, 1395, 1511, 
  1563
];

Array[uint] _spec_indicies = [
  0, 0, 0, 0, 0, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 0, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  2, 1, 1, 1, 3, 1, 4, 1, 
  5, 1, 6, 1, 7, 1, 8, 1, 
  9, 9, 9, 9, 9, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 9, 
  1, 9, 9, 9, 9, 9, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  9, 1, 10, 1, 1, 11, 13, 12, 
  14, 14, 14, 14, 14, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 14, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 0, 1, 15, 1, 16, 1, 
  17, 1, 18, 1, 19, 1, 20, 1, 
  21, 21, 21, 21, 21, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 21, 
  1, 21, 21, 21, 21, 21, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  21, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 1, 1, 1, 1, 22, 
  1, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 22, 22, 22, 22, 22, 
  22, 22, 22, 1, 23, 23, 23, 23, 
  23, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 23, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  24, 1, 1, 24, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 1, 1, 1, 
  1, 1, 1, 1, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 1, 1, 
  1, 1, 24, 1, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 24, 24, 
  24, 24, 24, 24, 24, 24, 25, 1, 
  26, 26, 26, 26, 26, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 26, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 25, 1, 27, 27, 27, 27, 
  27, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 27, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 28, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  29, 1, 27, 27, 27, 27, 27, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 27, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 28, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 1, 1, 1, 1, 
  30, 1, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 1, 1, 29, 1, 
  31, 1, 32, 1, 33, 1, 34, 1, 
  35, 1, 36, 1, 37, 1, 38, 1, 
  39, 39, 39, 39, 39, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 39, 
  1, 39, 39, 39, 39, 39, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  39, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 1, 1, 1, 1, 30, 
  1, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 30, 30, 30, 30, 30, 
  30, 30, 30, 1, 40, 40, 40, 40, 
  40, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 40, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  41, 1, 1, 41, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 1, 1, 1, 
  1, 1, 1, 1, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 41, 1, 
  41, 1, 41, 1, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 41, 41, 
  41, 41, 41, 41, 41, 41, 1, 42, 
  42, 42, 42, 42, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 42, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 1, 1, 1, 1, 43, 1, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 43, 43, 43, 43, 43, 43, 43, 
  43, 1, 44, 44, 44, 44, 44, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 44, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 45, 1, 
  1, 45, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 1, 46, 1, 47, 1, 
  1, 1, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 1, 1, 1, 1, 
  45, 1, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 45, 45, 45, 45, 
  45, 45, 45, 45, 1, 48, 48, 48, 
  48, 48, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 48, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 49, 
  1, 47, 1, 50, 50, 50, 50, 50, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 50, 1, 51, 1, 1, 1, 
  1, 51, 1, 1, 1, 1, 1, 51, 
  51, 1, 51, 51, 51, 51, 51, 51, 
  51, 51, 51, 51, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 51, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 51, 1, 53, 
  53, 53, 53, 53, 52, 52, 52, 52, 
  52, 52, 52, 52, 52, 52, 52, 52, 
  52, 52, 52, 52, 52, 52, 53, 52, 
  52, 52, 52, 52, 52, 52, 52, 52, 
  52, 52, 52, 52, 52, 52, 52, 52, 
  52, 52, 52, 52, 52, 52, 52, 52, 
  52, 54, 52, 0, 0, 0, 0, 0, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 0, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 2, 1, 1, 1, 3, 
  1, 0
];

Array[uint] _spec_trans_targs = [
  40, 0, 2, 12, 3, 4, 5, 6, 
  7, 8, 9, 10, 10, 11, 11, 13, 
  14, 15, 16, 17, 18, 19, 20, 21, 
  20, 22, 21, 23, 24, 40, 34, 25, 
  26, 27, 28, 29, 30, 31, 32, 33, 
  35, 34, 35, 36, 37, 36, 22, 38, 
  37, 22, 38, 39, 39, 39, 22
];

Array[uint] _spec_trans_actions = [
  0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 1, 0, 17, 0, 0, 
  0, 0, 0, 0, 0, 0, 1, 5, 
  0, 5, 0, 3, 3, 15, 1, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 
  7, 0, 0, 1, 9, 0, 22, 19, 
  0, 13, 0, 1, 0, 11, 25
];

uint spec_start = 1;
uint spec_first_final = 40;
uint spec_error = 0;

uint  spec_en_main = 1;


# line 264 "ragel/idl_parser.rl"

    void reset(){
        p = s = 0;

        
# line 453 "whip/utils/idl_parser.crk"
  cs = spec_start;

# line 269 "ragel/idl_parser.rl"
    }

    oper init (ClassGenerator gen0) {
        gen = gen0;
        logger = Logger(cerr, INFO);
    }

    int _parse() {    // Do the first read. 
        if (data is null)
            InvalidResourceError(FStr() `Error parsing IDL, null data pointer supplied`);
        uint parseLoops = 0;
        String curMsgName, curFieldName, curFieldType, curFieldDefault;
        Message curMsg;
        bool foundEq = false, fieldAdded = false, readOnly = false;

        pe = data_size;
        cs = spec_start;
        while (parseLoops <2 && p < pe){
        // ------ Start exec ---------------------------------------------------------
        
# line 477 "whip/utils/idl_parser.crk"
#  ragel flat exec

  bool testEof = false;
  uint _slen = 0;
  uint _trans = 0;
  uint _keys = 0;
  uint _inds = 0;
  uint _acts = 0;
  uint _nacts = 0;
  uint _tempval = 0;
  uint _goto_level = 0;
  uint _resume = 10;
  uint _eof_trans = 15;
  uint _again = 20;
  uint _test_eof = 30;
  uint _out = 40;

  while(true) { # goto loop
    bool _trigger_goto = false;
    if (_goto_level <= 0) {

# noEnd
      if (p == pe){
        _goto_level = _test_eof;
        continue;
      }


# errState != 0
      if (cs == 0){
        _goto_level = _out;
       continue;
      }
    } # _goto_level <= 0

     if (_goto_level <= _resume){
      _keys = cs << 1; // LOCATE_TRANS
      _inds = _spec_index_offsets[cs];
      _slen = _spec_key_spans[cs];

      if (   _slen > 0 && 
         _spec_trans_keys[_keys] <= data[p] && 
         data[p] <= _spec_trans_keys[_keys + 1]) 
        _trans = _spec_indicies[ _inds + data[p] - _spec_trans_keys[_keys] ]; 
      else _trans =_spec_indicies[ _inds + _slen ];

    cs = _spec_trans_targs[_trans];

    if (_spec_trans_actions[_trans] != 0) {
      _acts = _spec_trans_actions[_trans];
      _nacts = _spec_actions[_acts];
      _acts += 1;

      while (_nacts > 0) {
        _nacts -= 1;
        _acts += 1;
        _tempval = _spec_actions[_acts - 1];

     # start action switch
    if (_tempval  == 0) { // FROM_STATE_ACTION_SWITCH
# line 160 "ragel/idl_parser.rl" # end of line directive
    
          s = e = p;
            // ACTION
    }
    else  if (_tempval  == 1) { // FROM_STATE_ACTION_SWITCH
# line 164 "ragel/idl_parser.rl" # end of line directive
    
            readOnly = true;
            // ACTION
    }
    else  if (_tempval  == 2) { // FROM_STATE_ACTION_SWITCH
# line 168 "ragel/idl_parser.rl" # end of line directive
    
          if (curMsgName is null) {
            e = p;
            curMsgName = data.substr(s, e - s);
            curMsg = Message();
          }
            // ACTION
    }
    else  if (_tempval  == 3) { // FROM_STATE_ACTION_SWITCH
# line 176 "ragel/idl_parser.rl" # end of line directive
    
          e = p;
          curFieldType = data.substr(s, e - s);
          curFieldName = null;
          curFieldDefault = null;
          foundEq = false;
          fieldAdded = false;
            // ACTION
    }
    else  if (_tempval  == 4) { // FROM_STATE_ACTION_SWITCH
# line 185 "ragel/idl_parser.rl" # end of line directive
    
          if (curFieldName is null) {
            e = p;
            curFieldName = data.substr(s, e - s);
          }
            // ACTION
    }
    else  if (_tempval  == 5) { // FROM_STATE_ACTION_SWITCH
# line 192 "ragel/idl_parser.rl" # end of line directive
    
          foundEq = true;
            // ACTION
    }
    else  if (_tempval  == 6) { // FROM_STATE_ACTION_SWITCH
# line 196 "ragel/idl_parser.rl" # end of line directive
    
          e = p;
          curFieldDefault = data.substr(s, e - s);
            // ACTION
    }
    else  if (_tempval  == 7) { // FROM_STATE_ACTION_SWITCH
# line 201 "ragel/idl_parser.rl" # end of line directive
    
          if (curFieldName is null) { // We got a field name followed by a ;
            e = p;
            curFieldName = data.substr(s, e - s);
          } else if (foundEq && (curFieldDefault is null)) { // Got = .. ;
            e = p;
            curFieldDefault = data.substr(s, e - s);
          }

          if (!fieldAdded) {
            curMsg.addField(curFieldName, curFieldType, curFieldDefault);
            fieldAdded = true;
          }
          readOnly = false;
            // ACTION
    }
    else  if (_tempval  == 8) { // FROM_STATE_ACTION_SWITCH
# line 217 "ragel/idl_parser.rl" # end of line directive
    
          gen.addMessage(curMsgName, curMsg);
          curMsgName = null;
            // ACTION
    }
    else  if (_tempval  == 9) { // FROM_STATE_ACTION_SWITCH
# line 222 "ragel/idl_parser.rl" # end of line directive
    
          e = p;
          if (true) {
            incFileName := data.substr(s, e - s);
            logger.debug(sfmt `Parsing file $incFileName`);
            _parser := idlParser(gen); // new parser object
            _parser.setPath(paths);
            _parser.parseFile(incFileName);
            filesDone[incFileName] = true;
            for (item :in _parser.filesDone) {
                filesDone[item.key] = true;
            }
          }
            // ACTION
    }
# line 634 "whip/utils/idl_parser.crk" # end of line directive
    # end action switch
      } # while _nacts
    }

    if (_trigger_goto) continue;
    } # endif 

    if (_goto_level <= _again) {
      if (cs == 0) {
        _goto_level = _out;
        continue;
      }
      p += 1;
      if (p != pe) {
        _goto_level = _resume;
        continue;
      }
    } # _goto_level <= _again

    if (_goto_level <= _test_eof) {
    } # _goto_level <= _test_eof

    if (_goto_level <= _out) break;
    } # endif _goto_level <= out

  # end of execute block
# line 289 "ragel/idl_parser.rl"
        // ------ End exec -----------------------------------------------------------
            _readTo(pe+1); // Update pe just in case we got stuck at the end of a page by accident
            if (p < pe ) parseLoops++;
        }

        /* Check if we failed. */
        if ( cs == spec_error ) {
            /* Machine failed before finding a token. */
            throw ParseError(data.substr(s, p - s));
        }

        if (p < pe) {
            uint lineNumber = 1;
            for (uint i = 0; i < p; i++)
                if (data[i] == b'\n') lineNumber++;
            throw InvalidResourceError(FStr() `Error parsing IDL on line $lineNumber near: $(data.substr(p, min(32, pe-p)))`);
        }

        return gen.messages.count();
    }

    int parse(String spec) {
        data = PageBufferString(spec);
        data_size = spec.size;
        return _parse();
    }

    int parseTodo() {
        int numMessages = 0;
        while (filesTodo) {
            fname := filesTodo.popHead();
            iFile := _findFile(fname); // IDL file description
            updatePathFromFile(iFile.name);
            cFile := fopen(iFile.name.buffer, "r".buffer); // C File struct
            
            fd := fileno(cFile);

            data_size = iFile.info.st_size;
            tdata := mmap(null, iFile.info.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
            data = PageBufferString(String(byteptr(tdata), data_size, false));
            
            if (uintz(tdata) != uintz(0) - 1) {
                retval := _parse(); // This might add filenames to filesTodo
                munmap(tdata, data_size);
                numMessages += retval;
                filesDone[fname] = true;
            }
        }
        return numMessages;
    }

    int parseFile(String fname_in) {
        filesTodo.append(fname_in);
        return parseTodo();
    }

    int parse(Reader r) {
        int numMessages = 0;
        data = PageBufferReader(r); // Reads one block
        data_size = data.size; 
        numMessages += _parse();
        return numMessages + parseTodo();
    }
}
