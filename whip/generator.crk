// Serializable/Materializable base class writer
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.cont.hashmap HashMap, OrderedHashMap;
import crack.io FStr;
import crack.lang KeyError, InvalidArgumentError, Formatter;
import crack.strutil StringArray;

FStr sfmt = {};

class Member {
  String type, default;
  bool isArray;

  oper init(String type0, String default0) :
        type = type0, default = default0 {
  }
}

// class to hold basic class/message information
class Message {
  OrderedHashMap[String, Member] fields = { }; // name, [type, default]
  oper init() { }

  void addField(String name, String type, String default) {
    if (fields.hasKey(name))
      throw KeyError(sfmt `Field $name already defined\n`);
    fields[name] = Member(type, default);
  }

  void addField(String name, String type) {
    addField(name, type, null);
  }
}

// Generate class definitions
@abstract class ClassGenerator {
  HashMap[String, String] builtins = { };
  OrderedHashMap[String, Message] messages = { };
  String indent="  ";

  oper init() { }

  // Add list of builtins
  oper init(StringArray builtins0, StringArray sizes) {
    if (builtins0.count() != sizes.count())
      throw InvalidArgumentError(sfmt I`builtins and sizes arguments must be \
                                        arrays of the same length: given \
                                        $(builtins0.count()) and \
                                        $(sizes.count())`);

    for (uint i = 0; i < builtins0.count(); i++) {
      builtins[builtins0[i]] = sizes[i];
    }
  }

  // Add a message to list
  void addMessage(String name, Message msg){
    // error on duplicate
    if (messages.hasKey(name))
      throw InvalidArgumentError(sfmt `Message type $name already defined`);

    // Check that we know all field types and add message to list
    for (fitem :in msg.fields){
      fname := fitem.key;

      ftype := fitem.val.type;
      if (!builtins.hasKey(ftype) && !messages.hasKey(ftype))
        throw KeyError(sfmt `Unknown message type $ftype`);

      messages[name] = msg;
    }
  }

  // Write member defs
  @abstract int _writeDefs(Formatter fmt, Message msg);

  // Write serialization method
  @abstract int _writeSerialize(Formatter fmt, Message msg);

  // Write materialize method
  @abstract int _writeMaterialize(Formatter fmt, Message msg);

  // Write serialization method
  @abstract int _writeSize(Formatter fmt, Message msg);

  // Write all class definition to writer
  @abstract int create(Formatter fmt);
}
