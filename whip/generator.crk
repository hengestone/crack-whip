// Serializable/Materializable base class writer
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.cont.hashmap HashMap, OrderedHashMap;
import crack.io FStr;
import crack.lang KeyError, InvalidArgumentError, Formatter;
import crack.strutil StringArray;

String preamble="
// Serializable/Materializable base class autogenerated by MessageGenerator

import crack.cont.array Array;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer;

";
FStr sfmt = {};

class Member {
  String type, default;
  bool isArray;

  oper init(String type0, String default0) :
        type = type0, default = default0 {
  }
}

// class to hold basic class/message information
class Message {
  OrderedHashMap[String, Member] fields = { }; // name, [type, default]
  oper init() { }

  void addField(String name, String type, String default) {
    if (fields.hasKey(name))
      throw KeyError(sfmt `Field $name already defined\n`);
    fields[name] = Member(type, default);
  }

  void addField(String name, String type) {
    addField(name, type, null);
  }
}

// Generate class definitions
class ClassGenerator {
  HashMap[String, String] builtins = { };
  OrderedHashMap[String, Message] messages = { };
  String indent="  ";

  oper init() { }

  // Add list of builtins
  oper init(StringArray builtins0, StringArray sizes) {
    if (builtins0.count() != sizes.count())
      throw InvalidArgumentError(sfmt I`builtins and sizes arguments must be \
                                        arrays of the same length: given \
                                        $(builtins0.count()) and \
                                        $(sizes.count())`);

    for (uint i = 0; i < builtins0.count(); i++) {
      builtins[builtins0[i]] = sizes[i];
    }
  }

  // Add a message to list
  void addMessage(String name, Message msg){
    // error on duplicate
    if (messages.hasKey(name))
      throw InvalidArgumentError(sfmt `Message type $name already defined`);

    // Check that we know all field types and add message to list
    for (fitem :in msg.fields){
      fname := fitem.key;

      ftype := fitem.val.type;
      if (!builtins.hasKey(ftype) && !messages.hasKey(ftype))
        throw KeyError(sfmt `Unknown message type $ftype`);

      messages[name] = msg;
    }
  }

  // Write member defs
  int _writeDefs(Formatter fmt, Message msg) {
    uint cnt = 0;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      fmt `$(indent)$(member.type) $fname`;

      // Write default value
      if (!(member.default is null))
        fmt ` = $(member.default)`;
      fmt.write(";\n");
      cnt++;
    }
    return cnt;
  }

  // Write serialization method
  int _writeSerialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)void serialize(Serializer sr) {\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (builtins.hasKey(member.type))
        fmt `$(indent*2)sr.format($fname);\n`;
      else
        fmt `$(indent*2)$(fname).serialize(sr);\n`;
      cnt++;
    }
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write materialize method
  int _writeMaterialize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)void materialize(Materializer m) {\n`;

    for (fitem :in msg.fields){
      fname := fitem.key;
      member := fitem.val;
      if (builtins.hasKey(member.type))
        fmt `$(indent*2)$fname = m.format($fname);\n`;
      else
        fmt `$(indent*2)$(fname).materialize(m);\n`;
      cnt++;
    }
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write serialization method
  int _writeSize(Formatter fmt, Message msg) {
    uint cnt = 0;
    fmt `\n$(indent)uint sizeNeeded() {\n`;
    fmt `$(indent*2)uint cnt = 0;\n`;

    for (fitem :in msg.fields) {
      fname := fitem.key;
      member := fitem.val;
      sz := builtins.get(member.type);
      if (sz) {
        if (sz[0] == b".") {
          fmt `$(indent*2)cnt += $(fname)$(sz)`;
        }
        else {
          fmt `$(indent*2)cnt += $(sz)`;
        }
      }
      else
        fmt `$(indent*2)cnt += $(fname).sizeNeeded()`;
      fmt `; // $fname\n`;
      cnt++;
    }
    fmt `$(indent*2)return cnt;\n`;
    fmt `$(indent)}\n`;
    return cnt;
  }

  // Write all class definition to writer
  int create(Formatter fmt) {
    uint iLevel = 0, cnt = 0; // indent level

    fmt.write(preamble);

    for (item :in messages) {
      name := item.key;
      msg := item.val;

      fmt `//$("-"*78)\n`;
      fmt `class $(name)_Base {\n`;
      _writeDefs(fmt, msg);
      _writeSerialize(fmt, msg);
      _writeSize(fmt, msg);
      _writeMaterialize(fmt, msg);
      fmt.write("}\n\n");
      cnt++;
    }
    return cnt;

  }
}
