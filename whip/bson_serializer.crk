// Class serialization/deserialization using supplied functions
import crack.ascii escape;
import crack.io Formatter, Writer, cout, FDReader, FDWriter, FStr, cerr;
import crack.db.mongo_support OID;
import crack.lang ManagedBuffer, Buffer, InvalidArgumentError,
                  InvalidResourceError, AssertionError;

import whip.serializer Materializer, MaterializerIter,
                       Serializer, Serializable;
import crack.runtime errno, free, strlen;
import crack.sys strerror;

import crack.ext._mongo bson, bson_cursor,
                        bson_new,
                        bson_new_sized,
                        bson_new_from_data,
                        bson_finish,
                        bson_reset,
                        bson_free,
                        bson_size,
                        bson_data,
                        bson_validate_key,

                        bson_append_string,
                        bson_append_double,
                        bson_append_document,
                        bson_append_array,
                        bson_append_binary,
                        bson_append_oid,
                        bson_append_boolean,
                        bson_append_utc_datetime,
                        bson_append_null,
                        bson_append_regex,

                        bson_append_javascript,
                        bson_append_symbol,
                        bson_append_javascript_w_scope,
                        bson_append_int32,
                        bson_append_timestamp,
                        bson_append_int64,
                        bson_cursor_new,
                        bson_find,
                        bson_cursor_free,
                        bson_cursor_next,

                        bson_cursor_find_next,
                        bson_cursor_find,
                        bson_cursor_type,
                        bson_cursor_type_as_string,
                        bson_cursor_key,
                        bson_cursor_get_string,
                        bson_cursor_get_double,
                        bson_cursor_get_document,
                        bson_cursor_get_array,
                        bson_cursor_get_oid,
                        bson_cursor_get_binary,

                        bson_cursor_get_boolean,
                        bson_cursor_get_utc_datetime,
                        bson_cursor_get_javascript,
                        bson_cursor_get_symbol,
                        bson_cursor_get_int32,
                        bson_cursor_get_timestamp,
                        bson_cursor_get_int64;


import crack.strutil StringArray;
import crack.ascii hex;
import crack.cont.array Array;
import crack.db.mongo BSON, BSONOID, BSON_BINARY_SUBTYPE_GENERIC;

fmt := FStr();

@import crack.ann define;

StringArray basicTypes = ["int", "uint", "int32", "uint32", "int64", "uint64",
                          "byteptr", "float32", "float64",  "array[int]",
                          "array[uint]", "array[int32]",    "array[uint32]",
                          "array[int64]", "array[uint64]", "array[float32]",
                          "array[float64], oid, array[oid]"
                         ];

StringArray crackTypes = ["int", "uint", "int32", "uint32", "int64", "uint64",
                          "String", "float32", "float", "float64", "bool",
                          "Array[int]", "Array[uint]", "Array[int32]",
                          "Array[uint32]", "Array[int64]", "Array[uint64]",
                          "Array[float32]", "Array[float64]", "OID", "Array[OID]"
                         ];

StringArray crackSizes = ["INT_SIZE", "INT_SIZE", "4", "4", "8", "8",
                          ".size", "4", "8", "8", "INT_SIZE",
                          ".count()", ".count()", ".count()",
                          ".count()", ".count()", ".count()",
                          ".count()", ".count()", "12", ".count()"];

// Serializer for BSON formatter buffers
class BSONBufferSerializer : Serializer {
    bson _b;
    BSON _B;
    bool _finished;
    bson _tmpBSON = null;

    void _setup(bson b) {
        _b = b;
        _B = BSON(b); // Track references
        _finished = false;
        writeId = false;
        writeArraySize = false;
        hasPrefix = true;
        hasPostfix = true;
    }

    void _setup(uint bufsize) {
        _setup(bson_new_sized(int32(bufsize)));
    }

    oper init() {
        _setup(1024);
    }

    oper init(uint bufsize) {
        _setup(bufsize);
    }

    oper init(bson b) {
        _setup(b);
    }

    oper init(FDWriter w) : _b = null {
        throw InvalidResourceError("Not implemented");
    }

    void prefix(Buffer name) {
        _tmpBSON = null;
        if (!(name is null) && name.size > 0) {
            _tmpBSON = _b;
            _b = bson_new();
        }
    }

    void postfix(Buffer name) {
        if (!(_tmpBSON is null)) {
            bson_finish(_b);
            bson_append_document(_tmpBSON, name.buffer, _b);
            _b = _tmpBSON;
        }
    }

    BSON getBSON() {
        return _B;
    }

    bson get_bson() {
        return _b;
    }

    void setBSON(bson b) {
        _b = b;
    }

    bool finish() {
        if (!_finished) {
            _finished = bson_finish(_b);
        }
        return _finished;
    }

    void reset() {
      _B.reset();
      _finished = false;
    }

    Buffer serialized() {
        if (!_finished) {
            bson_finish(_b);
            _finished = true;
        }
        return Buffer(bson_data(_b), bson_size(_b));
    }

    @define formatMethod(T, BT, s) {
        void format(T val, Buffer name) {
            if (name)
                bson_append_$$BT(_b, name.buffer, val);
            else
                throw InvalidArgumentError(fmt I`Failed to format integer element: \
                                                 empty name`);
        }
    }

    @formatMethod(int32, int32, 4)
    @formatMethod(int64, int64, 8)
    @formatMethod(float64, double, 8)
    @formatMethod(bool, boolean, 1)

    void format(String val, Buffer name) {
        if (!(val is null) && !(name is null))
            bson_append_binary(_b, name.buffer, BSON_BINARY_SUBTYPE_GENERIC,
                               val.buffer, int32(val.size));
        else
            throw InvalidArgumentError(fmt I`Failed to format string element: \
                                             empty name or data: $name, $val`);

    }

    void format(OID val, Buffer name) {
        if (!(val is null) && !(name is null))
            bson_append_oid(_b, name.buffer, val.buffer);
    }

    @define formatMethodUnsupported(T, RT, BT, s) {
        void format(T val, Buffer name) {
            if (name)
                bson_append_$$BT(_b, name.buffer, RT(val));
            else
                throw InvalidArgumentError(fmt I`Failed to format Unsupported \
                                                 element: empty name`);
        }
    }

    @formatMethodUnsupported(int, int32, int32, 4)
    @formatMethodUnsupported(uint, int32, int32, 4)
    @formatMethodUnsupported(int16, int32, int32, 4)
    @formatMethodUnsupported(uint16, int32, int32, 4)
    @formatMethodUnsupported(uint32, int32, int32, 4)
    @formatMethodUnsupported(uint64, int64, int64, 8)
    @formatMethodUnsupported(float32, float64, double, 8)
    @formatMethodUnsupported(float, float64, double, 8)
    @formatMethodUnsupported(float32, float64, double, 8)

    @define formatMethodArray(T, BT, s) {
        void format(Array[T] val, Buffer name) {
            if (val is null || name is null) return;
            fmt := FStr();
            bsonArray := bson_new();
            data := val.data();
            uint cnt = val.count();
            for (uint i; i < cnt; i++) {
                d := fmt `$i\0`;
                if (name && val)
                   bson_append_$$BT(bsonArray, d.buffer, data[i]);
                else 
                    throw InvalidArgumentError(fmt I`Failed to format Array \
                                                     element: empty name or value`);
            }
            bson_finish(bsonArray);

            bson_append_array(_b, name.buffer, bsonArray);
        }
    }

    @formatMethodArray(int32, int32, 4)
    @formatMethodArray(int64, int64, 8)
    @formatMethodArray(float64, double, 8)
    @formatMethodArray(bool, boolean, 1)

    @define formatMethodArrayUnsupported(T, RT, BT, s) {
        void format(Array[T] val, Buffer name) {
            if (val is null || name is null) return;
            fmt := FStr();
            bsonArray := bson_new();
            data := val.data();
            uint cnt = val.count();
            for (uint i; i < cnt; i++) {
                d := fmt `$i\0`;
                if (name && val)
                    bson_append_$$BT(bsonArray, d.buffer, RT(data[i]));
                else
                    throw InvalidArgumentError(fmt I`Failed to format Unsupported Array \
                                                     element: empty name or value`);
            }
            bson_finish(bsonArray);
            bson_append_array(_b, name.buffer, bsonArray);
        }
    }

    @formatMethodArrayUnsupported(int16, int32, int32, 4)
    @formatMethodArrayUnsupported(uint16, int32, int32, 4)
    @formatMethodArrayUnsupported(int, int32, int32, 4)
    @formatMethodArrayUnsupported(uint32, int32, int32, 4)
    @formatMethodArrayUnsupported(uint64, int64, int64, 8)
    @formatMethodArrayUnsupported(uint, int32, int32, 4)
    @formatMethodArrayUnsupported(float, float64, double, 4)
    @formatMethodArrayUnsupported(float32, float64, double, 4)

    void format(Array[String] val, Buffer name) {
        if (val is null || name is null) return;
        fmt := FStr();
        bsonArray := bson_new();
        String d;
        uint cnt = val.count();
        for (uint i; i < cnt; i++) {
            d = fmt `$i\0`;
            bson_append_string(_b, d.buffer, val[i].buffer,
                               int32(val[i].size));
        }
        bson_finish(bsonArray);
        bson_append_array(_b, name.buffer, bsonArray);
    }

    void format(Array[OID] val, Buffer name) {
        if (val is null || name is null) return;
        fmt := FStr();
        bsonArray := bson_new();
        String d;
        uint cnt = val.count();
        for (uint i; i < cnt; i++) {
            d = fmt `$i\0`;
            bson_append_oid(_b, d.buffer, val[i].buffer);
        }
        bson_finish(bsonArray);
        bson_append_array(_b, name.buffer, bsonArray);
    }

    Serializer startArray(uint size, Buffer name) {
        asr := BSONBufferSerializer(bson_new());
        return asr;
    }

    bool appendItem(Serializable obj, uint ind) {
        bson tmpBson = _b;
        index := fmt `$ind\0`;
        elem := bson_new();
        _b = elem;
        obj.serialize(this, null);
        bson_finish(elem);
        _b = tmpBson;
        result := bson_append_document(_b, index.buffer, elem);
        return result;
    }

    bool endArray(Serializer sr, Buffer name) {
        asr := BSONBufferSerializer.cast(sr);
        bson_finish(asr.get_bson());
        result := bson_append_array(_b, name.buffer, asr.get_bson());
        return result;
    }

    void write(Buffer buf) {
        format(buf, null);
    }

    void format(Formatter fmt) {
        fmt `BSONBufferSerializer: $_b`;
    }
}

class BSONBufferMaterializer : Materializer {
    bson _b, _tmpBSON;
    BSON _B;
    bson_cursor _c, _tmpBSONCursor;
    Buffer _buf;
    bool _strict = false;


    void _setup(bson b) {
        hasPrefix = true;
        hasPostfix = true;
        
        _B = BSON(b);
    }

    oper init (bson b) : _b = b, _c = bson_cursor_new(b) {
        _setup(b);
    }

    oper init (BSON B) : _B = B, _b = B.get_bson() {
        _c = bson_cursor_new(_b);
    }

    // We need this for the generator
    oper init() {
        _b = bson_new();
        _c = bson_cursor_new(_b);
        _setup(_b);
    }

    oper init(Buffer buf) : _buf = buf  {
        _b = bson_new_from_data(_buf.buffer, int32(_buf.size));
        if (_b is null)
            throw InvalidResourceError(fmt I`Could not create BSON document \
                                             from supplied Buffer: $(strerror())\n`);
        else
            bson_finish(_b);

        _c = bson_cursor_new(_b);
        if (_c is null)
            throw InvalidResourceError(fmt I`Could not create BSON cursor from \
                                             supplied document:\n$(strerror())`);

        _setup(_b);
    }

    oper init(FDReader r) : _buf = null {
        throw InvalidResourceError("Not implemented");
    }

    void prefix(Buffer name) {
        _tmpBSON = null;
        _tmpBSONCursor = null;
        if (!(name is null) && name.size > 0) {
            _tmpBSON = _b;
            _tmpBSONCursor = _c;
            if (bson_cursor_next(_c)) { // TODO handle error case
                _b = bson_cursor_get_document(_c);
                _c = bson_cursor_new(_b);
            }
        }
    }

    void postfix(Buffer name) {
        if (!(_tmpBSON is null)) {
            bson_cursor_free(_c);
            bson_free(_b);
            _b = _tmpBSON;
            _c = _tmpBSONCursor;
        }
    }

    bool getStrict() {
        return _strict;
    }

    void setStrict(bool s) {
        _strict = s;
    }

    Buffer getBuffer() {
        return _buf;
    }

    BSON getBSON() {
        return _B;
    }

    bson get_bson() {
        return _b;
    }

    bson_cursor get_bson_cursor() {
        return _c;
    }

    void set_bson(bson newb) {
        _b = newb;
    }

    void set_bson_cursor(bson_cursor newc) {
        _c = newc;
    }

    bool _nextItem(Buffer key) {
        while (bson_cursor_next(_c)) {
            if (_strict || StaticString(bson_cursor_key(_c)) == key)
            return true;
        }
        return false;
    }

    void _handleError(String tpe) {
        throw InvalidResourceError(
            FStr() `Error $(strerror()) materializing type $(tpe)`
        );
    }

    @define formatMethod(T, RT, DEF) {
        T format(T val, Buffer name) {
            if (_nextItem(name)) return T(bson_cursor_get_$$RT(_c));
            else return DEF;
        }
    }

    bool format(bool val, Buffer name) {
        if (_nextItem(name)) return bson_cursor_get_boolean(_c);
        else return true;
    }


    @formatMethod(int, int64, 0)
    @formatMethod(uint, int64, 0)

    @formatMethod(int16, int32, 0)
    @formatMethod(uint16, int32, 0)

    @formatMethod(int32, int32, 0)
    @formatMethod(uint32, int32, 0)

    @formatMethod(uint64, int64, 0)
    @formatMethod(int64, int64, 0)
    @formatMethod(float32, double, 0)
    @formatMethod(float64, double, 0)

    // No casting needed
    @define formatMethodArrayDirect(T, RT) {
        Array[T] format(Array[T] val, Buffer name) {
            A := Array[T]();
            if (!_nextItem(name)) return A;
            // Read the array length so we can allocate enough space
            BA := bson_cursor_get_array(_c); // Get the array document
            if (BA is null)
                throw AssertionError(I"Trying to materialize non-array BSON
                                       object as an array");
            cA :=  bson_cursor_new(BA);

            while (bson_cursor_next(cA))
                A.append(bson_cursor_get_$$RT(_c));
            bson_cursor_free(cA);
            bson_free(BA);
            return A
        }
    }

    @define formatMethodArray(T, RT) {
        Array[T] format(Array[T] val, Buffer name) {
            A := Array[T]();
            if (!_nextItem(name)) return A;
            // Read the array length so we can allocate enough space
            BA := bson_cursor_get_array(_c); // Get the array document
            if (BA is null)
                throw AssertionError(I"Trying to materialize non-array BSON
                                       object as an array");
            cA :=  bson_cursor_new(BA);

            while (bson_cursor_next(cA))
                A.append(T(bson_cursor_get_$$RT(_c)));
            bson_cursor_free(cA);
            bson_free(BA);
            return A
        }
    }

    @formatMethodArray(int, int64)
    @formatMethodArray(uint, int64)

    @formatMethodArray(int16, int32)
    @formatMethodArray(uint16, int32)

    @formatMethodArrayDirect(int32, int32)
    @formatMethodArray(uint32, int32)

    @formatMethodArrayDirect(int64, int64)
    @formatMethodArray(uint64, int64)

    @formatMethodArray(float32, double)
    @formatMethodArray(float64, double)
    @formatMethodArrayDirect(bool, boolean)

    String format(String val, Buffer name) {
        if (!_nextItem(name)) return String("");
        bytes := bson_cursor_get_binary(_c);
        if (bytes is null)
            throw AssertionError("NULL found when materializing String");
        // Make a copy of the string
        retval := String(bytes.data, bytes.size, false);
        free(bytes);
        return retval;
    }

    OID format(OID val, Buffer name) {
        if (!_nextItem(name)) return OID();
        return BSONOID(_c);
    }

    Array[String] format(Array[String] val, Buffer name) {
        A := Array[String]();
        if (!_nextItem(name)) return A;
        // Read the array length so we can allocate enough space
        BA := bson_cursor_get_array(_c); // Get the array document
        if (BA is null)
            throw AssertionError(I"Trying to materialize non-array BSON object
                                   as an array");
        cA :=  bson_cursor_new(BA);
        while (bson_cursor_next(cA)) {
            bytes := bson_cursor_get_binary(_c);
            if (bytes is null)
                throw AssertionError("NULL found when materializing String");
            // Make a copy of the string
            A.append(String(bytes.data, bytes.size, false));
            free(bytes);
        }

        bson_cursor_free(cA);
        bson_free(BA);
        return A;
    }

    class BSONMaterializerIter : MaterializerIter {
        BSONBufferMaterializer __mt, __cmt = null;
        bson_cursor __c = null;
        bson        __b = null;
        bool        __first = true;
        uint        __index = 0;

        oper init(BSONBufferMaterializer mt) {
            if (mt is null) __mt = null;
            else {
            __b = bson_cursor_get_array(mt.get_bson_cursor());
                if (!(__b is null)) {// TODO raise exception is not an array
                    __mt = BSONBufferMaterializer(__b);
                    __mt.setStrict(mt.getStrict());
                    __c = __mt.get_bson_cursor();
                }
                else
                    throw InvalidResourceError("Could not retrieve BSON array document");
            }
        }

        bool next() {
            if (!(__mt is null) && bson_cursor_next(__c)) {
                tmpB := bson_cursor_get_document(__c);
                if (tmpB is null)
                    throw InvalidResourceError(fmt I`Could not retrieve BSON array \
                                                     element $(bson_cursor_key(__c))`);
                __cmt = BSONBufferMaterializer(tmpB);
                __cmt.setStrict(__mt.getStrict());
                __index++;
                return true;
            }
            return false;
        }

        bool nx() {
            if (__mt is null) return false;
            if (__first) {
                __first = false;
                return !(__b is null);
            } else {
                return next();
            }
        }

        Materializer elem() { return __cmt;}

        bool isTrue() {
            return !(__b is null);
        }
    }


    MaterializerIter iter(Buffer name) {
        if (_nextItem(name))
            return BSONMaterializerIter(this);
        else {
            if (_strict)
                throw InvalidResourceError(
                    FStr() I`Could not advance cursor in BSON
                             document when creating iterator,
                             or $name is not the next key name`);
            else return BSONMaterializerIter(null);
        }
    }


    void write(Buffer buf){
        format(buf, null);
    }
}
