// An abstract class similar to a formatter,
// only for elementary types and arrays

// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.cont.array Array;
import crack.lang Buffer;
import crack.io FDReader, FDWriter;
@import crack.ann define, export;

// Compare functions from crack.lang
@define lightcmp (T) {
  int cmp(T a, T b) { return a - b; }
}

@define heavycmp(T) {
  int cmp(T a, T b) {
    if (a > b)
        return 1;
    else if (a < b)
        return -1;
    else
        return 0;
  }
}

int cmp(bool a, bool b) { 
    if ((a && b) || (!a && !b)) return 0;
    return 1;
}

@lightcmp(byte)
@lightcmp(int16)
@lightcmp(int32)
@heavycmp(uint16)
@heavycmp(uint32)
@heavycmp(int64)
@heavycmp(uint64)
@heavycmp(float32)
@heavycmp(float64)
@lightcmp(int)
@heavycmp(uint)

@export_symbols cmp;
@abstract class Serializable;

@abstract class Serializer {
    bool hasPrefix = false;
    bool hasPostfix = false;
    String itemSep = "";
    bool writeId = false;
    bool writeArraySize = false;

    oper init() {}

    @define formatMethod(T) {
        @abstract void format(T val, Buffer name);
        @abstract void format(Array[T] val, Buffer name);
    }

    @formatMethod(int)
    @formatMethod(uint)

    @formatMethod(int16)
    @formatMethod(uint16)

    @formatMethod(int32)
    @formatMethod(uint32)

    @formatMethod(int64)
    @formatMethod(uint64)

    @formatMethod(float32)
    @formatMethod(float64)

    @formatMethod(bool)
    @formatMethod(String)

    @abstract void write(Buffer buf);
    @abstract void prefix(Buffer name);
    @abstract void postfix(Buffer name);

    @abstract Serializer startArray(uint size, Buffer name);
    @abstract bool endArray(Serializer sr, Buffer name);
    @abstract bool appendItem(Serializable obj, uint ind);
}

@abstract class MaterializerIter;

@abstract class Materializer {

    bool hasPrefix = false;
    bool hasPostfix = false;

    oper init() {}

    @define formatMethod(T) {
        @abstract T format(T val, Buffer name);
        @abstract Array[T] format(Array[T] val, Buffer name);
    }

    @formatMethod(int)
    @formatMethod(uint)

    @formatMethod(int16)
    @formatMethod(uint16)

    @formatMethod(int32)
    @formatMethod(uint32)

    @formatMethod(int64)
    @formatMethod(uint64)

    @formatMethod(float32)
    @formatMethod(float64)

    @formatMethod(bool)
    @formatMethod(String)

    @abstract void write(Buffer buf);
    @abstract void prefix(Buffer name);
    @abstract void postfix(Buffer name);

    @abstract class MaterializerIter {
        oper init() {}
        @abstract Materializer elem();
        @abstract bool nx();
        @abstract bool next();
    }

    @abstract MaterializerIter iter(Buffer name);

}

@abstract class Serializable {    
    @abstract void serialize(Serializer sr, Buffer name);
    @abstract void serialize(Serializer sr);
    @abstract void materialize(Materializer mt, Buffer name);
    @abstract void materialize(Materializer mt);
    @abstract uint sizeNeeded();
}
